//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This simulation was used in an article at Frontiers in Computational Neuroscience,
// special issue on Structure, dynamics and function of brains:
//  Citation: Neymotin SA, Lee H, Park E, Fenton AA and Lytton WW (2011). Emergence of physiological oscillation
//  frequencies in a computer model of neocortex. Front. Comput. Neurosci. 5:19. doi: 10.3389/fncom.2011.00019
//  Received: 19 Oct 2010; Accepted: 01 Apr 2011. 
//  Edited by:   Ad Aertsen, Albert Ludwigs University, Germany
//  Reviewed by: Imre Vida, University of Glasgow, UK 
//               Michael Schmuker, Freie Universti√§t Berlin, Germany 
//               Maxim Bazhenov, University of California, USA 
// 
// article available at:
//  http://www.frontiersin.org/Computational_Neuroscience/10.3389/fncom.2011.00019/abstract
//
// for help with simulation/analysis routines: contact email: samn at neurosim dot downstate dot edu
//
// note that paper used matlab's pmtm and fft functions which are only commercially available, so not
// used in this demonstration. some differences in spectral output visible depending on which spectral
// methods employed. see readme.txt and getpsd function below for more information
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// load files for running NEURON + analysis, etc.
load_file("nrngui.hoc")
xopen("./setup.hoc")
xopen("./nrnoc.hoc")
load_file("init.hoc")

usens = 1 // if set to 1 uses NetStims (faster to load, less memory). usens set to 0 for paper
mytstop = 20e3 // sets duration of simulation in milliseconds

// load sim-related files
load_file("nqsnet.hoc")
load_file("network.hoc")
print "setting up external inputs...please wait..."
load_file("params.hoc")
load_file("run.hoc")
load_file("nload.hoc")

objref myg[4] // Graph objects

run() // run simulation of 9 columns for mytstop milliseconds

{skipsnq=0 binsz=5 sampr=1e3/binsz initAllMyNQs()} // setup spike counts per time

//draw raster from 1 column
print "drawing raster..."
{gg() gvmarkflag=1 snq.marksym="O" snq.gr("id","t",0,1,4) myg[0]=g gvmarkflag=0 myg[0].size(1e3,2e3,0,470) rasterlines()}

// draw LFP from 1 column
print "drawing LFP..."
{myg[1]=new Graph() nqLFP.v.sub(nqLFP.v.mean) nqLFP.v.label("LFP") nqLFP.v.plot(myg[1],vdt_INTF6) myg[1].size(1e3,2e3,-1500,3000)}

objref nqp[numcols][2],nqps[numcols][2] // stores NQS objects containing PSD of multiunit activity vectors

//nrnpsd - calculates PSD and returns as an NQS object
obfunc nrnpsd () { local sampr localobj vec,nqp
  vec=$o1 sampr=$2
  nqp=new NQS("f","pow")
  nqp.v[1].spctrm(vec)
  nqp.v.indgen(0,sampr/2,(sampr/2)/nqp.v[1].size)
  nqp.v.resize(nqp.v[1].size)
  return nqp
}

//variables for controlling getpsd
 drawraw = 0 // whether to draw raw PSD -- set it before calling getpsd()
 boxszdef = 21 // default PSD smoothing for 20 s sim -- set it before calling getpsd()

// getpsd - gets and draws raw/smoothed PSD in two separate graphs
proc getpsd () { local i,j,I,boxsz
  print "calculating/drawing MUA PSD..."
  if(drawraw) myg[2]=new Graph()
  myg[3]=new Graph()
  for i=0,numcols-1 for I=0,1 {
    {vec.resize(nqCO.v.size) vec.fill(0)}
    for j=0,CTYPi-1 if(col.numc[j] && ice(j)==I) vec.add(nqCTY[i].v[j]) // forms E and I MUA separately
    vec.sub(vec.mean) // remove mean

//    {nqsdel(nqp[i][I]) nqp[i][I]=pypsd(vec,sampr)} // get PSD using python matplotlib psd function -- requires matplotlib
// and NEURON compiled with python. matplotlib available here: http://http://matplotlib.sourceforge.net/. pypsd function in pywrap.hoc

//    {nqsdel(nqp[i][I]) nqp[i][I]=pypmtm(vec,sampr)} // use python mtspec library pmtm function -- requires python mtspec install
// and NEURON compiled with python. python mtspec available here: http://pypi.python.org/pypi/mtspec. pypmtm function in pywrap.hoc

    {nqsdel(nqp[i][I]) nqp[i][I]=nrnpsd(vec,sampr)}//get PSD with NEURON spctrm Vector function: default since in all NEURONs
    if(drawraw){nqp[i][I].v[1].plot(myg[2],nqp[i][I].v[0],I+2,1) myg[2].exec_menu("View = plot")} // plot raw PSD

    boxsz = MAXxy(boxszdef*nqp.v.size/512,4) // smoothing level for PSD box filter

    {nqsdel(nqps[i][I])  nqps[i][I]=new NQS() nqps[i][I].cp(nqp[i][I])} // get/plot smoothed PSD
    {boxfilt(nqps[i][I].v[1],boxsz) nqps[i][I].v[1].plot(myg[3],nqps[i][I].v[0],I+2,1) myg[3].exec_menu("View = plot")}
  }
}
getpsd()
